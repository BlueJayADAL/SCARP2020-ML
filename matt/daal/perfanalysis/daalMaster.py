import sys
import os
import argparse
import time
import threading

import daalAnalyzeDNS
import daalAnalyzeHTTPWithTime
import daalAnalyzeMETA
import daalAnalyzeTLS

import daalCollectCommonDNS
import daalCollectCommonHTTP
import daalCollectCommonTLS

import daalSelectDataset
import daalClassifyWithTime

### MAIN FUNCTION ###
def main():
	print("Time started...")
	startTime = time.time()
	parser = argparse.ArgumentParser(description="Run Joy to recursively convert the raw PCAP files into processed zipped files", add_help=True)
	parser.add_argument('-i', '--input', action="store", help="The input folder containing raw PCAP files")
	parser.add_argument('-o', '--output', action="store", help="The output folder containing files generated by Joy")
	parser.add_argument('-c', '--collect', action="store_true", help="Collect common features of DNS, HTTP, and TLS")
	parser.add_argument('-v', '--verbose', action="store_true", help="Print all actions to the stdout") #not yet implemented
	parser.add_argument('-j', '--joy', action="store_true", help="Process raw PCAPs and generate output zip files using Cisco Joy")
	parser.add_argument('-f', '--files', action="store_true", help="Generate output feature JSON files from Joy output")
	parser.add_argument('-s', '--selectData', action="store_true", help="Generate train and test JSON files")
	parser.add_argument('-t', '--train', action="store", help="Train specified model")
	parser.add_argument('-e', '--test', action="store", help="Test specified model")
	args = parser.parse_args()
	
	#setup input folder and output folders (pcap=rawData, joyfolder=working dir of all outputs, datafolder=joy output data)
	pcapFolder, joyFolder, dataFolder = setupFolders(args.input, args.output)

	# Process data using Joy
	if args.joy:
		print("Processing data using joy. . .")
		processJoy(pcapFolder, dataFolder)
		print("Joy processing complete!")

	# Analyze Joy data and create feature JSON files
	if args.files:
		print("Generating JSON files. . .")
		generateJSON(dataFolder)

	# Collect most common features from TLS, HTTP, and DNS
	if args.collect:
		print("Collecting common features. . .")
		collectAllCommon(joyFolder)

	# Notify when threads are complete
	if args.files or args.collect:
		print("All threads complete!")

	# Generate train and test JSON files
	if args.selectData:
		print("Selecting datasets. . .")
		selectDataset(joyFolder)
		print("Train/Test datasets generated!")
	
	# Train specified model	
	if args.train:
		print("Training model. . .")
		train(joyFolder, args.train)
		print("Done model training!")

	# Test specified model
	if args.test:
		print("Testing model. . .")
		test(joyFolder, args.test)
		print("Done model testing!")
	
	# End of program logistics
	endTime = time.time()
	print("Master elapsed in %.3f seconds" %(endTime - startTime))
### END MAIN FUNCTION ###

### INITIAL SETUP FUNCTIONS ###
def setupFolders(inputFolder, outputFolder):
	if inputFolder == None or not os.path.isdir(inputFolder) or outputFolder == None or not os.path.isdir(outputFolder):
		print("No valid input or output folder!")
		exit()
	else:
		pcapFolder = inputFolder
		if not pcapFolder.endswith('/'):
			pcapFolder += '/'

		joyFolder = outputFolder
		if not joyFolder.endswith('/'):
			joyFolder += '/'
		dataFolder = "%sdata/" % (joyFolder)
		if not os.path.exists(dataFolder):
			os.mkdir(dataFolder)
	return (pcapFolder, joyFolder, dataFolder)
### END INITIAL SETUP FUNCTIONS ###

### JOY PROCESSING FUNCTIONS ###
def processJoy(pcapFolder, dataFolder):
	for dirpath, dirnames, filenames in os.walk(pcapFolder): #opt?
		if not dirnames:
			if not dirpath.endswith('/'):
				dirpath += '/'
			dirNames = dirpath.split('/')
			outName =  "%s_%s" % (dirNames[-3], dirNames[-2]) 
			fileCount = len(filenames)
			bound = 1
			count = (fileCount+(bound-1))/bound
			idx = 0
			while idx < count:
				fileToBeProcessedString = ' '.join(["%s%s" % (dirpath,x) for x in filenames[idx*bound: min((idx+1)*bound, fileCount)]])
				command = "joy bidir=1 dns=1 tls=1 http=1 dist=1 %s > %s%s_%s.gz" % (fileToBeProcessedString, dataFolder, outName, str(idx))
				#print(command) #verbose
				os.system(command)
				idx += 1
### END JOY PROCESSING FUNCTIONS ###

### JSON RELATED FUNCTIONS ###
def generateJSON(dataFolder):
	# Multithread to accelerate
	# create threads	
	meta = threading.Thread(target=analyzeMETA, args=(dataFolder,))
	http = threading.Thread(target=analyzeHTTP, args=(dataFolder,))
	tls = threading.Thread(target=analyzeTLS, args=(dataFolder,))
	dns = threading.Thread(target=analyzeDNS, args=(dataFolder,))
	meta.start()
	tls.start()
	http.start()
	dns.start()
	dns.join()
	http.join()
	tls.join()
	meta.join()

def analyzeMETA(dataFolder):
	print("Analyzing Metadata.....")
	daalAnalyzeMETA.Analyze(dataFolder)
	print("Done analyzing Metadata!")

def analyzeHTTP(dataFolder):
	print("Analyzing HTTP.....")
	daalAnalyzeHTTPWithTime.Analyze(dataFolder)
	print("Done analyzing HTTP!")

def analyzeTLS(dataFolder):
	print("Analyzing TLS.....")
	daalAnalyzeTLS.Analyze(dataFolder)
	print("Done analyzing TLS!")

def analyzeDNS(dataFolder):
	print("Analyzing DNS.....")
	daalAnalyzeDNS.Analyze(dataFolder)
	print("Done analyzing DNS!")
### END JSON RELATED FUNCTIONS ###

### COLLECT COMMON RELATED FUNCTIONS ###
def collectAllCommon(joyFolder):
	ctls = threading.Thread(target=collectTLS, args=(joyFolder,))
	chttp = threading.Thread(target=collectHTTP, args=(joyFolder,))
	cdns = threading.Thread(target=collectDNS, args=(joyFolder,))
	ctls.start()
	chttp.start()
	cdns.start()
	ctls.join()
	chttp.join()
	cdns.join()

def collectTLS(joyFolder):
	print("Collecting common TLS features...")
	tlsPath = "%sTLS_JSON" % (joyFolder)
	daalCollectCommonTLS.Collect(tlsPath)
	print("Done collecting common TLS features!")

def collectHTTP(joyFolder):
	print("Collecting common HTTP features...")
	httpPath = "%sHTTP_JSON" % (joyFolder)
	daalCollectCommonHTTP.Collect(httpPath)
	print("Done collecting common HTTP features!")

def collectDNS(joyFolder):
	print("Collecting common DNS features...")
	dnsPath = "%sDNS_JSON" % (joyFolder)
	daalCollectCommonDNS.Collect(dnsPath)
	print("Done collecting common DNS features!")
### END COLLECT COMMON RELATED FUNCTIONS ###

### SELECT DATASET RELATED FUNCTIONS ###
def selectDataset(joyFolder):
	inputFolder = "%sTLS_JSON/" % joyFolder
	outPathTrain = "%strain.json" % joyFolder
	daalSelectDataset.Select(inputFolder, outPathTrain)
	print("train.json created at %strain.json" % joyFolder)

	outPathTest = "%stest.json" % joyFolder
	daalSelectDataset.Select(inputFolder, outPathTest)
	print("test.json created at %stest.json" % joyFolder)
### END SELECT DATASET RELATED FUNCTIONS ###

### TRAIN RELATED FUNCTIONS ###
def train(joyFolder, modelType):
	select = "%strain.json" % joyFolder
	daalClassifyWithTime.Classify(workDir=joyFolder, select=select, classify=True, test=False, inFile=None, output="params.txt", model=modelType, http=True, tls=True, dns=False)
### END TRAIN RELATED FUNCTIONS ###

### TEST RELATED FUNCTIONS ###
def test(joyFolder, modelType):
	select = "%stest.json" % joyFolder
	daalClassifyWithTime.Classify(workDir=joyFolder, select=select, classify=False, test=True, inFile="params.txt", output=None, model=modelType, http=True, tls=True, dns=False)
### END TEST RELATED FUNCTIONS ###

if __name__ == "__main__":
	main()
