import json
import sys
import gzip
from collections import defaultdict
import argparse
import os
import matplotlib.pyplot as plt
import numpy as np

direction = ["out", "in"]
nonPresenceField = ["content-type", "user-agent", "accept-language", "server", "code"]
skipField = ["body", "method", "version", "uri", "reason"]

def ProcessHTTP(inPathName, fileName, http):
	json_file = inPathName + fileName
	print("processing HTTP for %s" %(json_file))
	#read each line and convert it into dict
	total = 0
	lineno = 0
	with gzip.open(json_file,'r') as fp:
		for line in fp:
			lineno = lineno + 1
			#print lineno
			try:
				tmp = json.loads(line)
			except:
				continue
			if ('version' in tmp) or ("http" not in tmp):
				continue
			#assert(int(tmp["dp"]) == 80 or int(tmp["sp"]) == 80)
			resp = tmp["http"]
			total += len(resp)
			
			for h in resp:
				for d in direction:
					if d not in h:
						continue
					for kv in h[d]:
						#assert(len(list(kv.keys()))==1)
						key = (list(kv.keys()))[0]
						field = key.lower()
						if field in skipField:
							continue
						value = kv[key] 
						if field in nonPresenceField:
							if field not in http:
								http[field] = defaultdict()
							#handle the value
							if field == "server":
								value = (value.split(' '))[0]
								value = (value.split('/'))[0]
								if value[0:3] == "ECS":
									value = "ECS"
							elif field == "user-agent":
								value = (value.split(' '))[0]
							elif field == "content-type":
								if value[0:19] == "multipart/form-data":
									value = "multipart/form-data"
							#record value
							if value not in http[field]:
								http[field][value] = 1  
							else:
								http[field][value] += 1	
						else:
							if field not in http:
								http[field] = 1
							else:
								http[field] += 1
	if "totalHTTP" not in http:
		http["totalHTTP"] = total
	else:
		http["totalHTTP"] += total

def saveToJson(outPathName, fileName, http):
	fname = outPathName + (fileName.split('.'))[0]+"_HTTP.json"
	print("save JSON to " + fname)
	with open(fname, 'w') as fp:
		json.dump(http, fp)
		


def plotHTTP(http, inPathName, fileName, outPathName):
	outFolder = outPathName + (fileName.split('.'))[0] + "/"
	if not os.path.exists(outFolder):
		os.mkdir(outFolder)

	#print http
	fieldDict = defaultdict()
	fieldList = []
	for field in list(http.keys()):
		if field in nonPresenceField:
			total = 0
			for key in list(http[field].keys()):
				total += http[field][key]
			fieldDict[field] = total
		else:
			if field != "totalHTTP":
				fieldDict[field] = http[field]
		
	for field in list(fieldDict.keys()):
		fieldList.append( (field, fieldDict[field]/float(http["totalHTTP"])*100) )
	fieldList.sort(key=lambda x: x[1], reverse=True)
	numFields = 30
	if len(fieldList) > numFields:
		fieldList = fieldList[0:(numFields-1)]
	plt.clf()
	plt.figure(figsize=(15,15))
	plt.bar(range(0, len(fieldList)), [x[1] for x in fieldList], align='center', alpha=0.5, width=0.3)
	plt.xticks(range(0, len(fieldList)), [x[0] for x in fieldList], rotation=70, size='small')
	plt.ylabel('Percentage of Flows')
	plt.title('Most Frequent HTTP fields')
	plt.savefig(outFolder+"commonFields.pdf")
	presenceDict = fieldDict

	#non presence fields
	for field in nonPresenceField:
		if field in http:
			fieldDict = defaultdict()
			fieldList = []
			for key in list(http[field].keys()):
				fieldDict[key] = http[field][key]
			for key in list(fieldDict.keys()):
				fieldList.append( (key, fieldDict[key]/presenceDict[field]*100) )
			fieldList.sort(key=lambda x: x[1], reverse=True)
			numFields = 10
			if len(fieldList) > numFields:
				fieldList = fieldList[0:(numFields-1)]
			plt.clf()
			plt.figure(figsize=(10,10))
			plt.bar(range(0, len(fieldList)), [x[1] for x in fieldList], align='center', alpha=0.5, width=0.3)
			plt.xticks(range(0, len(fieldList)), [x[0] for x in fieldList], rotation=20)
			plt.ylabel('Percentage of Flows')
			plt.title(field)
			plt.savefig(outFolder+field+".pdf")				



def main():
	parser = argparse.ArgumentParser(description="Probability Distribution of HTTP Features in Dataset", add_help=True)
	parser.add_argument('-i', '--input', action="store", help="The input folder containing files generated by Joy")
	parser.add_argument('-j', '--json', action="store_true", default=False, help="Generate JSON output file")
	parser.add_argument('-f', '--figure', action="store_true", default=False, help="Generate Probability Distribution Figures")
	parser.add_argument('-a', '--allFile', action="store_true", default=False, help="Indicate whether treat all the file as together or separate")
	args = parser.parse_args()

	#setup input folder and output folders
	if args.input == None or not os.path.isdir(args.input):
		print("No valid input folder!")
		return
	else:
		joyFolder = args.input
		if not joyFolder.endswith('/'):
			joyFolder += '/'
	parentFolder = os.path.abspath(os.path.join(joyFolder, os.pardir))
	if not parentFolder.endswith('/'):
		parentFolder += '/'
	HTTP_JSON_Folder = parentFolder+"HTTP_JSON/"
	HTTP_Figure_Folder = parentFolder+"HTTP_Figure/" 
	if not os.path.exists(HTTP_JSON_Folder):
		os.mkdir(HTTP_JSON_Folder)
	if args.figure:
		if not os.path.exists(HTTP_Figure_Folder):
			os.mkdir(HTTP_Figure_Folder)

	#check if output JSON
	if args.json:
		if args.allFile == True: 
			http = defaultdict()
			allFileName = ""
		files = os.listdir(joyFolder)
		for item in files:
			if args.allFile == True: 
				allFileName += (item.split('.'))[0] + "-"
			try:
				if args.allFile == False: 
					http = defaultdict()
				ProcessHTTP(joyFolder, item, http)
				if args.allFile == False: 
					saveToJson(HTTP_JSON_Folder, item, http)
				if args.figure:
					if args.allFile == False: 
						plotHTTP(http, joyFolder, item, HTTP_Figure_Folder)
			except:
				continue
		if args.allFile == True:
			allFileName +=  ".json"
			saveToJson(HTTP_JSON_Folder, allFileName, http)
			if args.figure:
				plotHTTP(http, joyFolder, allFileName, HTTP_Figure_Folder)
	#check if output figures	
	elif args.figure:
		if args.allFile == True: 
			allFileName = ""
			files = os.listdir(joyFolder)
			for item in files:
				allFileName += (item.split('.'))[0] + "-"
			allFileName +=  ".json"
			fName = HTTP_JSON_Folder + (allFileName.split('.'))[0] + "_HTTP.json"
			if os.path.exists(fName):
				try:
					with open(fName,'r') as fp:
						http = json.load(fp)
						plotHTTP(http, joyFolder, allFileName, HTTP_Figure_Folder)
				except:
					pass
			else:
				http = defaultdict()
				for item in files:
					try:
						ProcessHTTP(joyFolder, item, http)
					except:
						continue
				try:
					plotHTTP(http, joyFolder, allFileName, HTTP_Figure_Folder)
				except:
					pass
		else:
			files = os.listdir(joyFolder)
			for item in files:
				try:
					fName = HTTP_JSON_Folder + (item.split('.'))[0] + "_HTTP.json"
					if os.path.exists(fName):
						with open(fName,'r') as fp:
							http = json.load(fp)
							plotHTTP(http, joyFolder, item, HTTP_Figure_Folder)	
					else:
						http = defaultdict()
						ProcessHTTP(joyFolder, item, http)
						plotHTTP(http, joyFolder, item, HTTP_Figure_Folder)
				except:
					continue


if __name__ == "__main__":
	main()
